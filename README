# 🪨✂️📄 Rock-Paper-Scissors Daemon (`rpsd`)
**CS 214: Systems Programming – Spring 2025**

### Authors  
- **Tanay Vysyaraju** — `tv193`  
- **Saroop Makhija** — `ssm229`

---

## 📖 Overview

This project implements an online multiplayer **Rock-Paper-Scissors game server** called `rpsd`. Designed as part of **CS 214: Systems Programming**, the server accepts incoming TCP connections, pairs clients into matches, and manages real-time gameplay via a custom-designed protocol.

Key features include:
- TCP socket handling  
- Forked process management  
- Real-time multiplayer logic  
- Robust I/O and session control  
- Duplicate login protection  
- Fault-tolerant matchmaking

The server ensures gameplay reliability through precise synchronization, rematch support, and concurrent session handling using `fork()` for scalable architecture. It also prevents duplicate player names and handles premature disconnects as forfeits, ensuring fair and fluid multiplayer experiences.

---

## ✅ Requirements

- Accept TCP connections on a port specified via command-line argument.
- Fully implement **RPSP protocol** (`P`, `W`, `B`, `M`, `R`, `C`, `Q`) with exact formatting.
- Handle **multiple concurrent games** using `fork()`.
- Prevent **duplicate logins** using an active-player list (send `R|L|Logged in||`).
- Treat client disconnects as **automatic forfeits** (`R|F|||`).
- After a valid `P|<name>||`, respond immediately with `W|1||`.
- Ensure accurate result messaging, rematch flow, and cleanup.

---

## 🧪 Test Plan

Manual verification was performed across the following key scenarios:

- **Win/Loss Case**  
  `Alice (ROCK)` defeats `Bob (SCISSORS)` → result reported → rematch or quit.

- **Draw**  
  `Carol` and `Dave` both play PAPER → receive `R|D|||`.

- **Forfeit Handling**  
  `Eve` connects and disconnects immediately → opponent (`Frank`) receives `R|F|||`.

- **Duplicate Login**  
  If `Frank` is in a match, another client using `"Frank"` gets `R|L|Logged in||`.

- **Concurrent Games**  
  Multiple pairs run matches independently, each forked into separate processes.

---

## ⚙️ Edge Cases & Fixes

> These issues were discovered and resolved through extensive manual testing:

1. **🧼 Stale Waiting Socket Cleanup (Rapid Reconnect)**  
   - **Issue**: `Ctrl+C` before matchmaking left stale sockets.  
   - **Fix**: On each `accept()`, we now purge any closed/error sockets from the waiting queue.

2. **🚫 Ignored Invalid Messages**  
   - **Issue**: Malformed messages broke state advancement.  
   - **Fix**: `read_message()` returns `-1` for bad inputs. We accept only valid `P|<name>||` for state progression.

3. **⚡ Immediate Wait Reply**  
   - **Issue**: Clients hung without `W|1||` after handshake.  
   - **Fix**: Send `W|1||` immediately after valid name receipt.

4. **🪪 Duplicate Name in Waiting Queue**  
   - **Issue**: Duplicate names bypassed checks if in waiting state.  
   - **Fix**: `name_is_duplicate()` now also checks the waiting list in addition to active list.

5. **💀 Forfeit During Moves**  
   - **Issue**: Mid-game disconnects caused indefinite wait.  
   - **Fix**: If `read_message()` fails, `R|F|||` is sent and sockets are closed.

6. **🧼 Child Process Cleanup & Active List Reaping**  
   - **Issue**: Finished child processes weren’t removed from active players.  
   - **Fix**: `SIGCHLD` handler `reap_children()` uses `waitpid(..., WNOHANG)` to clear PIDs and active records.

---

## 🧵 Concurrency Note

**The server handles multiple concurrent games using `fork()`**, allowing completely independent matches to run simultaneously with isolated state.

---

